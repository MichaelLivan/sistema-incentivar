// routes/users.js - VERS√ÉO CORRIGIDA PARA ADMIN GERAL
import express from 'express';
import bcrypt from 'bcryptjs';
import supabase from '../config/supabase.js';
import { authenticateToken } from '../middleware/auth.js';

const router = express.Router();

// GET USERS - Permitir admin geral ver todos os usu√°rios
router.get('/', authenticateToken, async (req, res) => {
  try {
    const { sector, type } = req.query;

    console.log('üîç [GET USERS] Usu√°rio fazendo requisi√ß√£o:', {
      id: req.user.id,
      name: req.user.name,
      type: req.user.type,
      sector: req.user.sector
    });

    console.log('üìã [GET USERS] Filtros recebidos:', { sector, type });

    // ‚úÖ CORRE√á√ÉO: Permitir admin geral acessar tudo
    if (req.user.type === 'adm-geral') {
      console.log('üîì [GET USERS] Admin geral - acesso total liberado');
    } else {
      // Seguran√ßa para outros tipos de usu√°rio
      if (type === 'at') {
        const allowed = [
          'adm-aba', 'adm-denver', 'adm-escolar', 'adm-grupo',
          'financeiro-pct', 'financeiro-ats',
          'coordenacao-aba', 'coordenacao-denver', 'coordenacao-escolar', 'coordenacao-grupo',
        ];
        if (!allowed.includes(req.user.type)) {
          console.log('‚ùå [GET USERS] Acesso negado para tipo:', req.user.type);
          return res.status(403).json({ message: 'Access denied for this user type' });
        }
      }
    }

    let query = supabase
      .from('users')
      .select('id, email, name, type, sector, active, created_at, hourly_rate')
      .order('name');

    // Aplicar filtros apenas se n√£o for admin geral
    if (req.user.type !== 'adm-geral') {
      if (sector) {
        query = query.eq('sector', sector);
      } else if (req.user.sector) {
        query = query.or(`sector.eq.${req.user.sector},sector.is.null`);
      }
    } else {
      // Admin geral pode filtrar por setor se especificado
      if (sector) {
        query = query.eq('sector', sector);
      }
    }

    if (type === 'at') {
      query = query.like('type', 'at-%');
    }

    const { data: users, error } = await query;

    if (error) {
      console.error('‚ùå [GET USERS] Erro ao buscar usu√°rios:', error);
      return res.status(500).json({ message: 'Erro ao buscar usu√°rios', error: error.message });
    }

    console.log('‚úÖ [GET USERS] Usu√°rios encontrados:', users?.length || 0);
    res.json(users || []);
  } catch (error) {
    console.error('‚ùå [GET USERS] Erro interno:', error);
    res.status(500).json({ message: 'Erro interno do servidor', error: error.message });
  }
});

// CREATE USER - VERS√ÉO TOTALMENTE CORRIGIDA
router.post('/', authenticateToken, async (req, res) => {
  try {
    console.log('üì§ [CREATE USER] Dados recebidos:', req.body);
    console.log('üë§ [CREATE USER] Usu√°rio fazendo requisi√ß√£o:', {
      id: req.user.id,
      name: req.user.name,
      type: req.user.type
    });
    
    const { name, email, type, sector, hourly_rate, password = '123456' } = req.body;

    // ‚úÖ VERIFICA√á√ÉO DE PERMISS√ÉO PARA CRIAR USU√ÅRIOS
    const canCreateUsers = [
      'adm-geral',
      'adm-aba', 'adm-denver', 'adm-grupo', 'adm-escolar'
    ];

    if (!canCreateUsers.includes(req.user.type)) {
      console.log('‚ùå [CREATE USER] Usu√°rio sem permiss√£o:', req.user.type);
      return res.status(403).json({ 
        message: 'Voc√™ n√£o tem permiss√£o para criar usu√°rios',
        userType: req.user.type 
      });
    }

    // Valida√ß√µes b√°sicas
    if (!name || !email || !type) {
      console.error('‚ùå [CREATE USER] Dados obrigat√≥rios ausentes:', { 
        name: !!name, 
        email: !!email, 
        type: !!type 
      });
      return res.status(400).json({ message: 'Nome, email e tipo s√£o obrigat√≥rios' });
    }

    // Validar email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      console.error('‚ùå [CREATE USER] Email inv√°lido:', email);
      return res.status(400).json({ message: 'Formato de email inv√°lido' });
    }

    // Validar tipo de usu√°rio
    const validTypes = [
      'financeiro-ats', 'financeiro-pct',
      'at-aba', 'at-denver', 'at-grupo', 'at-escolar',
      'pais',
      'coordenacao-aba', 'coordenacao-denver', 'coordenacao-escolar', 'coordenacao-grupo',
      'adm-aba', 'adm-denver', 'adm-grupo', 'adm-escolar', 'adm-geral'
    ];

    if (!validTypes.includes(type)) {
      console.error('‚ùå [CREATE USER] Tipo de usu√°rio inv√°lido:', type);
      return res.status(400).json({ message: 'Tipo de usu√°rio inv√°lido' });
    }

    // Verificar se setor √© necess√°rio
    const needsSector = type.startsWith('at-') || 
                       type.startsWith('coordenacao-') || 
                       (type.startsWith('adm-') && type !== 'adm-geral');

    if (needsSector && !sector) {
      console.error('‚ùå [CREATE USER] Setor obrigat√≥rio para tipo:', type);
      return res.status(400).json({ message: 'Setor √© obrigat√≥rio para esse tipo de usu√°rio' });
    }

    // ‚úÖ VERIFICA√á√ÉO MELHORADA DE EMAIL EXISTENTE
    console.log('üîç [CREATE USER] Verificando se email j√° existe:', email);
    
    try {
      const { data: existingUser, error: checkError } = await supabase
        .from('users')
        .select('id, email, type, active')
        .eq('email', email.toLowerCase())
        .maybeSingle();

      if (checkError) {
        console.error('‚ùå [CREATE USER] Erro ao verificar email existente:', checkError);
        return res.status(500).json({ 
          message: 'Erro ao verificar email existente',
          error: checkError.message 
        });
      }

      if (existingUser) {
        console.error('‚ùå [CREATE USER] Email j√° cadastrado:', {
          email: email,
          existingId: existingUser.id,
          existingType: existingUser.type,
          existingActive: existingUser.active
        });
        return res.status(409).json({ message: 'Este email j√° est√° cadastrado no sistema' });
      }

      console.log('‚úÖ [CREATE USER] Email dispon√≠vel');

    } catch (emailCheckError) {
      console.error('‚ùå [CREATE USER] Erro cr√≠tico na verifica√ß√£o de email:', emailCheckError);
      return res.status(500).json({ 
        message: 'Erro cr√≠tico ao verificar email',
        error: emailCheckError.message 
      });
    }

    // ‚úÖ HASH DA SENHA COM TRATAMENTO DE ERRO
    console.log('üîê [CREATE USER] Gerando hash da senha...');
    let hashedPassword;
    
    try {
      hashedPassword = await bcrypt.hash(password, 12);
      console.log('‚úÖ [CREATE USER] Hash da senha gerado com sucesso');
    } catch (hashError) {
      console.error('‚ùå [CREATE USER] Erro ao gerar hash da senha:', hashError);
      return res.status(500).json({ 
        message: 'Erro ao processar senha',
        error: hashError.message 
      });
    }

    // ‚úÖ PREPARAR DADOS PARA INSER√á√ÉO
    const userData = {
      name: name.trim(),
      email: email.toLowerCase().trim(),
      type,
      sector: needsSector ? sector : null,
      password: hashedPassword,
      hourly_rate: hourly_rate && !isNaN(hourly_rate) ? Number(hourly_rate) : null,
      active: true,
      created_at: new Date().toISOString()
    };

    console.log('üíæ [CREATE USER] Dados preparados para inser√ß√£o:', {
      ...userData,
      password: '[HIDDEN]'
    });

    // ‚úÖ INSER√á√ÉO NO BANCO COM MELHOR TRATAMENTO DE ERRO
    try {
      console.log('üöÄ [CREATE USER] Inserindo no banco de dados...');
      
      const { data: newUser, error: insertError } = await supabase
        .from('users')
        .insert(userData)
        .select('id, name, email, type, sector, active, created_at, hourly_rate')
        .single();

      if (insertError) {
        console.error('‚ùå [CREATE USER] Erro detalhado ao inserir usu√°rio:', {
          error: insertError,
          code: insertError.code,
          message: insertError.message,
          details: insertError.details,
          hint: insertError.hint
        });
        
        // Tratar erros espec√≠ficos do Supabase/PostgreSQL
        if (insertError.code === '23505') {
          return res.status(409).json({ message: 'Email j√° cadastrado (viola√ß√£o de unicidade)' });
        } else if (insertError.code === '23514') {
          return res.status(400).json({ message: 'Dados violam restri√ß√µes do banco de dados' });
        } else if (insertError.code === '23502') {
          return res.status(400).json({ message: 'Campo obrigat√≥rio ausente' });
        }
        
        return res.status(500).json({ 
          message: 'Erro ao criar usu√°rio no banco de dados',
          error: insertError.message,
          code: insertError.code,
          details: insertError.details || insertError.hint
        });
      }

      if (!newUser) {
        console.error('‚ùå [CREATE USER] Usu√°rio n√£o foi retornado ap√≥s inser√ß√£o');
        return res.status(500).json({ message: 'Falha ao criar usu√°rio - resposta vazia do banco' });
      }

      console.log('‚úÖ [CREATE USER] Usu√°rio criado com sucesso:', {
        id: newUser.id,
        name: newUser.name,
        email: newUser.email,
        type: newUser.type,
        sector: newUser.sector
      });

      res.status(201).json({
        success: true,
        message: 'Usu√°rio criado com sucesso',
        user: newUser
      });

    } catch (insertCriticalError) {
      console.error('‚ùå [CREATE USER] Erro cr√≠tico na inser√ß√£o:', insertCriticalError);
      return res.status(500).json({ 
        message: 'Erro cr√≠tico ao inserir usu√°rio',
        error: insertCriticalError.message 
      });
    }

  } catch (error) {
    console.error('‚ùå [CREATE USER] Erro interno geral:', error);
    res.status(500).json({ 
      message: 'Erro interno do servidor',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro inesperado'
    });
  }
});

// UPDATE USER
router.put('/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    const { name, email, type, sector, active, hourly_rate } = req.body;

    console.log('üìù [UPDATE USER] Atualizando usu√°rio:', id, req.body);
    console.log('üë§ [UPDATE USER] Usu√°rio fazendo requisi√ß√£o:', req.user.type);

    // Verificar permiss√£o para atualizar usu√°rios
    const canUpdateUsers = [
      'adm-geral',
      'adm-aba', 'adm-denver', 'adm-grupo', 'adm-escolar'
    ];

    if (!canUpdateUsers.includes(req.user.type)) {
      return res.status(403).json({ 
        message: 'Voc√™ n√£o tem permiss√£o para atualizar usu√°rios' 
      });
    }

    // Validar se usu√°rio existe
    const { data: existingUser, error: checkError } = await supabase
      .from('users')
      .select('id, type')
      .eq('id', id)
      .single();

    if (checkError || !existingUser) {
      console.log('‚ùå [UPDATE USER] Usu√°rio n√£o encontrado:', id);
      return res.status(404).json({ message: 'Usu√°rio n√£o encontrado' });
    }

    const updateData = {};
    if (name !== undefined) updateData.name = name.trim();
    if (email !== undefined) updateData.email = email.toLowerCase().trim();
    if (type !== undefined) updateData.type = type;
    if (sector !== undefined) updateData.sector = sector;
    if (active !== undefined) updateData.active = active;
    if (hourly_rate !== undefined) {
      updateData.hourly_rate = hourly_rate && !isNaN(hourly_rate) ? Number(hourly_rate) : null;
    }

    const { data: updatedUser, error: updateError } = await supabase
      .from('users')
      .update(updateData)
      .eq('id', id)
      .select('id, name, email, type, sector, active, created_at, hourly_rate')
      .single();

    if (updateError) {
      console.error('‚ùå [UPDATE USER] Erro ao atualizar usu√°rio:', updateError);
      return res.status(500).json({ message: 'Erro ao atualizar usu√°rio' });
    }

    console.log('‚úÖ [UPDATE USER] Usu√°rio atualizado:', updatedUser);

    res.json({
      success: true,
      message: 'Usu√°rio atualizado com sucesso',
      user: updatedUser
    });
  } catch (error) {
    console.error('‚ùå [UPDATE USER] Erro interno:', error);
    res.status(500).json({ message: 'Erro interno do servidor' });
  }
});

// DELETE USER - HARD DELETE COMPLETO (deleta tudo relacionado)
router.delete('/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;

    console.log('üóëÔ∏è [DELETE USER] Iniciando exclus√£o completa do usu√°rio:', id);
    console.log('üë§ [DELETE USER] Usu√°rio fazendo requisi√ß√£o:', req.user.type);

    // Verificar permiss√£o para deletar usu√°rios
    const canDeleteUsers = [
      'adm-geral',
      'adm-aba', 'adm-denver', 'adm-grupo', 'adm-escolar'
    ];

    if (!canDeleteUsers.includes(req.user.type)) {
      return res.status(403).json({ 
        message: 'Voc√™ n√£o tem permiss√£o para excluir usu√°rios' 
      });
    }

    // 1. Verificar se o usu√°rio existe e obter dados
    const { data: existingUser, error: fetchError } = await supabase
      .from('users')
      .select('id, name, type, email, sector')
      .eq('id', id)
      .single();

    if (fetchError || !existingUser) {
      console.error('‚ùå [DELETE USER] Usu√°rio n√£o encontrado:', fetchError);
      return res.status(404).json({ message: 'Usu√°rio n√£o encontrado' });
    }

    console.log('üîç [DELETE USER] Usu√°rio encontrado:', existingUser.name, '- Tipo:', existingUser.type);

    let deletedData = {
      user: existingUser.name,
      type: existingUser.type,
      sessionsDeleted: 0,
      supervisionsDeleted: 0,
      patientsUnlinked: 0
    };

    // 2. SE FOR UM AT, DELETAR TODOS OS DADOS RELACIONADOS
    if (existingUser.type && existingUser.type.startsWith('at-')) {
      console.log('üë®‚Äç‚öïÔ∏è [DELETE USER] Usu√°rio √© um AT - iniciando limpeza completa...');

      // 2.1. DELETAR TODAS AS SESS√ïES DO AT
      console.log('üóëÔ∏è [DELETE USER] Deletando todas as sess√µes do AT...');
      const { data: deletedSessions, error: sessionsError } = await supabase
        .from('sessions')
        .delete()
        .eq('at_id', id)
        .select('id');

      if (sessionsError) {
        console.error('‚ùå [DELETE USER] Erro ao deletar sess√µes:', sessionsError);
        return res.status(500).json({ 
          message: 'Erro ao deletar sess√µes do AT', 
          error: sessionsError.message 
        });
      }

      deletedData.sessionsDeleted = deletedSessions?.length || 0;
      console.log(`‚úÖ [DELETE USER] ${deletedData.sessionsDeleted} sess√µes deletadas`);

      // 2.2. DELETAR TODAS AS SUPERVIS√ïES DO AT
      console.log('üóëÔ∏è [DELETE USER] Deletando todas as supervis√µes do AT...');
      const { data: deletedSupervisions, error: supervisionsError } = await supabase
        .from('supervisions')
        .delete()
        .eq('at_id', id)
        .select('id');

      if (supervisionsError) {
        console.error('‚ùå [DELETE USER] Erro ao deletar supervis√µes:', supervisionsError);
        return res.status(500).json({ 
          message: 'Erro ao deletar supervis√µes do AT', 
          error: supervisionsError.message 
        });
      }

      deletedData.supervisionsDeleted = deletedSupervisions?.length || 0;
      console.log(`‚úÖ [DELETE USER] ${deletedData.supervisionsDeleted} supervis√µes deletadas`);

      // 2.3. DESVINCULAR PACIENTES DO AT (setar at_id como null)
      console.log('üîó [DELETE USER] Desvinculando pacientes do AT...');
      const { data: unlinkedPatients, error: unlinkError } = await supabase
        .from('patients')
        .update({ at_id: null })
        .eq('at_id', id)
        .select('id, name');

      if (unlinkError) {
        console.error('‚ùå [DELETE USER] Erro ao desvincular pacientes:', unlinkError);
        return res.status(500).json({ 
          message: 'Erro ao desvincular pacientes do AT', 
          error: unlinkError.message 
        });
      }

      deletedData.patientsUnlinked = unlinkedPatients?.length || 0;
      console.log(`‚úÖ [DELETE USER] ${deletedData.patientsUnlinked} pacientes desvinculados do AT`);

      if (unlinkedPatients && unlinkedPatients.length > 0) {
        console.log('üìã [DELETE USER] Pacientes desvinculados:', unlinkedPatients.map(p => p.name).join(', '));
      }
    }

    // 3. SE FOR PAIS, VERIFICAR SE H√Å PACIENTES VINCULADOS
    if (existingUser.type === 'pais') {
      console.log('üë™ [DELETE USER] Usu√°rio √© um respons√°vel - verificando pacientes vinculados...');
      
      const { data: linkedPatients, error: patientsError } = await supabase
        .from('patients')
        .select('id, name')
        .or(`parent_email.eq.${existingUser.email},parent_email2.eq.${existingUser.email}`);

      if (patientsError) {
        console.error('‚ùå [DELETE USER] Erro ao verificar pacientes vinculados:', patientsError);
        return res.status(500).json({ 
          message: 'Erro ao verificar pacientes vinculados ao respons√°vel' 
        });
      }

      if (linkedPatients && linkedPatients.length > 0) {
        console.log('‚ö†Ô∏è [DELETE USER] Respons√°vel tem pacientes vinculados:', linkedPatients.map(p => p.name));
        return res.status(409).json({
          message: 'N√£o √© poss√≠vel excluir este respons√°vel. H√° pacientes vinculados a ele.',
          linkedPatients: linkedPatients.map(p => p.name),
          suggestion: 'Exclua os pacientes primeiro ou remova este respons√°vel dos pacientes.'
        });
      }
    }

    // 4. DELETAR O USU√ÅRIO
    console.log('üóëÔ∏è [DELETE USER] Deletando o usu√°rio...');
    const { error: deleteUserError } = await supabase
      .from('users')
      .delete()
      .eq('id', id);

    if (deleteUserError) {
      console.error('‚ùå [DELETE USER] Erro ao deletar usu√°rio:', deleteUserError);
      return res.status(500).json({ 
        message: 'Erro ao deletar usu√°rio', 
        error: deleteUserError.message 
      });
    }

    console.log('‚úÖ [DELETE USER] Usu√°rio deletado permanentemente');

    res.status(200).json({
      success: true,
      message: 'Usu√°rio e todos os dados relacionados foram deletados com sucesso',
      deletedData: deletedData
    });

  } catch (error) {
    console.error('‚ùå [DELETE USER] Erro interno ao excluir usu√°rio:', error);
    res.status(500).json({
      message: 'Erro interno ao excluir usu√°rio completamente',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro inesperado'
    });
  }
});

// CHECK IF PARENT EMAIL EXISTS
router.get('/email-exists', authenticateToken, async (req, res) => {
  const { email } = req.query;
  if (!email) return res.status(400).json({ message: 'Email √© obrigat√≥rio' });

  const { data, error } = await supabase
    .from('users')
    .select('id')
    .eq('email', email.toLowerCase())
    .eq('type', 'pais')
    .maybeSingle();

  if (error) {
    console.error('‚ùå [EMAIL EXISTS] Erro ao verificar email:', error);
    return res.status(500).json({ message: 'Erro ao verificar e-mail', error: error.message });
  }

  res.json({ exists: !!data });
});

// CHECK IF EMAIL IS AVAILABLE - VERS√ÉO CORRIGIDA
router.get('/email/:email', async (req, res) => {
  const { email } = req.params;

  try {
    console.log('üîç [EMAIL AVAILABLE] Verificando disponibilidade do email:', email);
    
    const { data, error } = await supabase
      .from('users')
      .select('id, type, active')
      .eq('email', email.toLowerCase())
      .maybeSingle();

    if (error) {
      console.error('‚ùå [EMAIL AVAILABLE] Erro ao verificar email:', error);
      return res.status(500).json({ error: 'Erro ao verificar e-mail' });
    }

    const isAvailable = !data;
    console.log('‚úÖ [EMAIL AVAILABLE] Email dispon√≠vel:', isAvailable);
    
    if (data) {
      console.log('üìã [EMAIL AVAILABLE] Email j√° cadastrado para:', {
        type: data.type,
        active: data.active
      });
    }
    
    res.json({ isAvailable });
  } catch (err) {
    console.error('‚ùå [EMAIL AVAILABLE] Erro interno:', err);
    res.status(500).json({ error: 'Erro interno ao verificar e-mail' });
  }
});

export default router;