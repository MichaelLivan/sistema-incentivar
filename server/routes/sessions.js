// ‚úÖ ARQUIVO SESSIONS.JS COMPLETO E CORRIGIDO - ROTAS PARA ATENDIMENTOS
import express from 'express';
import supabase from '../config/supabase.js';
import { authenticateToken } from '../middleware/auth.js';

const router = express.Router();

// ‚úÖ LISTAR SESS√ïES/ATENDIMENTOS
router.get('/', authenticateToken, async (req, res) => {
  try {
    const { month, year, patient_id, at_id } = req.query;
    
    console.log('üîç [SESSIONS] Carregando sess√µes para usu√°rio:', req.user.type);
    
    let query = supabase
      .from('sessions')
      .select(`
        *,
        patient:patients!sessions_patient_id_fkey(id, name, sector, parent_email),
        at:users!sessions_at_id_fkey(id, name, sector)
      `)
      .order('date', { ascending: false })
      .order('start_time', { ascending: false });

    // ‚úÖ FILTROS POR TIPO DE USU√ÅRIO
    if (req.user.type.startsWith('at-')) {
      // ATs veem suas pr√≥prias sess√µes
      query = query.eq('at_id', req.user.id);
    } else if (req.user.type === 'pais') {
      // Pais veem sess√µes dos seus filhos
      const { data: parentUser, error: parentError } = await supabase
        .from('users')
        .select('email')
        .eq('id', req.user.id)
        .single();

      if (parentError) {
        return res.status(500).json({ message: 'Erro ao buscar dados do respons√°vel' });
      }

      // Buscar todos os pacientes e filtrar os filhos deste respons√°vel
      const { data: allPatients, error: patientsError } = await supabase
        .from('patients')
        .select('id, parent_email, parent_email2')
        .eq('active', true);

      if (patientsError) {
        return res.status(500).json({ message: 'Erro ao buscar pacientes' });
      }

      const myChildrenIds = allPatients
        .filter(patient => {
          const isMainParent = patient.parent_email?.toLowerCase() === parentUser.email.toLowerCase();
          const isSecondParent = patient.parent_email2?.toLowerCase() === parentUser.email.toLowerCase();
          return isMainParent || isSecondParent;
        })
        .map(patient => patient.id);

      if (myChildrenIds.length === 0) {
        return res.json([]); // Sem filhos vinculados
      }

      query = query.in('patient_id', myChildrenIds);
    } else if (req.user.sector && req.user.type !== 'adm-geral') {
      // Usu√°rios setoriais veem sess√µes do seu setor
      const { data: sectorPatients } = await supabase
        .from('patients')
        .select('id')
        .eq('sector', req.user.sector);
      
      const patientIds = sectorPatients?.map(p => p.id) || [];
      if (patientIds.length > 0) {
        query = query.in('patient_id', patientIds);
      }
    }
    // Admin geral v√™ todas

    // ‚úÖ FILTROS ADICIONAIS
    if (patient_id) {
      query = query.eq('patient_id', patient_id);
    }

    if (at_id) {
      query = query.eq('at_id', at_id);
    }

    if (month && year) {
      const startDate = `${year}-${month.padStart(2, '0')}-01`;
      const endDate = `${year}-${month.padStart(2, '0')}-31`;
      query = query.gte('date', startDate).lte('date', endDate);
    }

    const { data: sessions, error } = await query;

    if (error) {
      console.error('‚ùå [SESSIONS] Erro ao buscar sess√µes:', error);
      return res.status(500).json({ message: 'Erro ao buscar sess√µes' });
    }

    console.log(`‚úÖ [SESSIONS] ${sessions?.length || 0} sess√µes encontradas`);
    res.json(sessions || []);

  } catch (error) {
    console.error('‚ùå [SESSIONS] Erro interno:', error);
    res.status(500).json({ message: 'Erro interno ao buscar sess√µes' });
  }
});

// ‚úÖ CRIAR SESS√ÉO/ATENDIMENTO
router.post('/', authenticateToken, async (req, res) => {
  try {
    const { patient_id, start_time, end_time, date, observations, is_substitution } = req.body;

    console.log('üì§ [SESSIONS] Criando sess√£o:', {
      patient_id,
      start_time,
      end_time,
      date,
      user: req.user.type,
      at_id: req.user.id
    });

    // ‚úÖ VALIDA√á√ïES
    if (!patient_id || !start_time || !end_time || !date) {
      return res.status(400).json({ message: 'Todos os campos obrigat√≥rios devem ser preenchidos' });
    }

    // ‚úÖ VERIFICAR PERMISS√ïES
    // Apenas ATs podem criar sess√µes
    if (!req.user.type.startsWith('at-')) {
      return res.status(403).json({ message: 'Apenas ATs podem registrar atendimentos' });
    }

    // ‚úÖ VERIFICAR SE O PACIENTE EXISTE
    const { data: patient, error: patientError } = await supabase
      .from('patients')
      .select('id, name, sector, at_id')
      .eq('id', patient_id)
      .eq('active', true)
      .single();

    if (patientError || !patient) {
      return res.status(404).json({ message: 'Paciente n√£o encontrado' });
    }

    // ‚úÖ VERIFICAR SE √â SUBSTITUI√á√ÉO OU PACIENTE PR√ìPRIO
    if (!is_substitution && patient.at_id !== req.user.id) {
      return res.status(403).json({ 
        message: 'Voc√™ s√≥ pode registrar atendimentos para seus pr√≥prios pacientes ou usar o modo substitui√ß√£o' 
      });
    }

    // ‚úÖ VERIFICAR SE √â SUBSTITUI√á√ÉO NO MESMO SETOR
    if (is_substitution && patient.sector !== req.user.sector) {
      return res.status(403).json({ 
        message: 'Substitui√ß√µes s√≥ s√£o permitidas dentro do mesmo setor' 
      });
    }

    // ‚úÖ CALCULAR HORAS
    const calculateHours = (start, end) => {
      const [startHour, startMin] = start.split(':').map(Number);
      const [endHour, endMin] = end.split(':').map(Number);
      const startMinutes = startHour * 60 + startMin;
      const endMinutes = endHour * 60 + endMin;
      const diffMinutes = endMinutes - startMinutes;
      return Math.max(0, diffMinutes / 60);
    };

    const hours = calculateHours(start_time, end_time);

    if (hours <= 0) {
      return res.status(400).json({ message: 'Hor√°rio de fim deve ser posterior ao hor√°rio de in√≠cio' });
    }

    // ‚úÖ VERIFICAR DUPLICATAS
    const { data: existingSession } = await supabase
      .from('sessions')
      .select('id')
      .eq('patient_id', patient_id)
      .eq('at_id', req.user.id)
      .eq('date', date)
      .eq('start_time', start_time)
      .eq('end_time', end_time)
      .maybeSingle();

    if (existingSession) {
      return res.status(409).json({ message: 'J√° existe um atendimento id√™ntico registrado' });
    }

    // ‚úÖ INSERIR SESS√ÉO
    const sessionData = {
      patient_id,
      at_id: req.user.id,
      start_time,
      end_time,
      date,
      hours,
      observations: observations || '',
      is_substitution: is_substitution || false,
      is_confirmed: false, // Aguardando confirma√ß√£o da recep√ß√£o
      is_approved: false,
      is_launched: false,
      created_at: new Date().toISOString()
    };

    const { data: newSession, error: insertError } = await supabase
      .from('sessions')
      .insert(sessionData)
      .select(`
        *,
        patient:patients!sessions_patient_id_fkey(name, sector),
        at:users!sessions_at_id_fkey(name, sector)
      `)
      .single();

    if (insertError) {
      console.error('‚ùå [SESSIONS] Erro ao inserir sess√£o:', insertError);
      return res.status(500).json({ 
        message: 'Erro ao criar sess√£o', 
        error: insertError.message,
        details: insertError.details || 'Detalhes n√£o dispon√≠veis'
      });
    }

    console.log('‚úÖ [SESSIONS] Sess√£o criada com sucesso:', {
      id: newSession.id,
      patient_id: newSession.patient_id,
      at_id: newSession.at_id,
      hours: newSession.hours,
      is_substitution: newSession.is_substitution,
      created_by: req.user.name
    });

    res.status(201).json({
      message: 'Atendimento registrado com sucesso',
      sessionId: newSession.id,
      session: newSession
    });

  } catch (error) {
    console.error('‚ùå [SESSIONS] Erro interno ao criar sess√£o:', error);
    res.status(500).json({ 
      message: 'Erro interno ao criar atendimento',
      error: error.message
    });
  }
});

// ‚úÖ CONFIRMAR SESS√ÉO (RECEP√á√ÉO) - FUN√á√ÉO PRINCIPAL CORRIGIDA
router.patch('/:id/confirm', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;

    console.log('‚úÖ [SESSIONS] Confirmando sess√£o:', id, 'por usu√°rio:', req.user.name, 'tipo:', req.user.type);

    // ‚úÖ CORRE√á√ÉO PRINCIPAL: Verificar permiss√£o melhorada
    const canConfirm = req.user.type === 'adm-geral' || 
                      req.user.type.startsWith('adm-') ||
                      req.user.type.startsWith('coordenacao-') ||
                      req.user.type.startsWith('financeiro-');

    if (!canConfirm) {
      console.log('‚ùå [SESSIONS] Acesso negado para tipo:', req.user.type);
      return res.status(403).json({ 
        message: 'Apenas administradores podem confirmar atendimentos',
        userType: req.user.type,
        allowedTypes: ['adm-geral', 'adm-*', 'coordenacao-*', 'financeiro-*']
      });
    }

    console.log('‚úÖ [SESSIONS] Permiss√£o confirmada para:', req.user.type);

    // ‚úÖ VERIFICAR SE SESS√ÉO EXISTE
    const { data: session, error: sessionError } = await supabase
      .from('sessions')
      .select('*')
      .eq('id', id)
      .single();

    if (sessionError || !session) {
      console.error('‚ùå [SESSIONS] Sess√£o n√£o encontrada:', sessionError);
      return res.status(404).json({ message: 'Atendimento n√£o encontrado' });
    }

    if (session.is_confirmed) {
      console.log('‚ö†Ô∏è [SESSIONS] Sess√£o j√° confirmada:', id);
      return res.status(400).json({ message: 'Atendimento j√° foi confirmado' });
    }

    console.log('üîç [SESSIONS] Sess√£o encontrada, confirmando...', {
      id: session.id,
      patient_id: session.patient_id,
      at_id: session.at_id,
      date: session.date
    });

    // ‚úÖ CONFIRMAR SESS√ÉO
    const { data: confirmedSession, error: confirmError } = await supabase
      .from('sessions')
      .update({
        is_confirmed: true,
        confirmed_at: new Date().toISOString(),
        confirmed_by: req.user.id
      })
      .eq('id', id)
      .select()
      .single();

    if (confirmError) {
      console.error('‚ùå [SESSIONS] Erro ao confirmar sess√£o:', confirmError);
      return res.status(500).json({ 
        message: 'Erro ao confirmar atendimento',
        error: confirmError.message 
      });
    }

    console.log('‚úÖ [SESSIONS] Sess√£o confirmada com sucesso por:', req.user.name, req.user.type);
    
    res.json({ 
      message: 'Atendimento confirmado com sucesso',
      session: confirmedSession,
      confirmedBy: {
        id: req.user.id,
        name: req.user.name,
        type: req.user.type
      }
    });

  } catch (error) {
    console.error('‚ùå [SESSIONS] Erro interno na confirma√ß√£o:', error);
    res.status(500).json({ 
      message: 'Erro interno ao confirmar atendimento',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro inesperado'
    });
  }
});

// ‚úÖ APROVAR SESS√ÉO - FUN√á√ÉO CORRIGIDA
router.patch('/:id/approve', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;

    console.log('‚úÖ [SESSIONS] Aprovando sess√£o:', id, 'por usu√°rio:', req.user.name, 'tipo:', req.user.type);

    // ‚úÖ CORRE√á√ÉO: Verificar permiss√£o melhorada para aprova√ß√£o
    const canApprove = req.user.type === 'adm-geral' || 
                      req.user.type.startsWith('adm-') ||
                      req.user.type.startsWith('coordenacao-');

    if (!canApprove) {
      console.log('‚ùå [SESSIONS] Acesso negado para aprova√ß√£o, tipo:', req.user.type);
      return res.status(403).json({ 
        message: 'Sem permiss√£o para aprovar atendimentos',
        userType: req.user.type 
      });
    }

    // Verificar se a sess√£o existe e est√° confirmada
    const { data: session, error: sessionError } = await supabase
      .from('sessions')
      .select('*')
      .eq('id', id)
      .single();

    if (sessionError || !session) {
      return res.status(404).json({ message: 'Atendimento n√£o encontrado' });
    }

    if (!session.is_confirmed) {
      return res.status(400).json({ 
        message: 'Atendimento deve estar confirmado antes de ser aprovado' 
      });
    }

    if (session.is_approved) {
      return res.status(400).json({ message: 'Atendimento j√° foi aprovado' });
    }

    const { data: approvedSession, error: approveError } = await supabase
      .from('sessions')
      .update({
        is_approved: true,
        approved_at: new Date().toISOString(),
        approved_by: req.user.id
      })
      .eq('id', id)
      .select()
      .single();

    if (approveError) {
      console.error('‚ùå [SESSIONS] Erro ao aprovar sess√£o:', approveError);
      return res.status(500).json({ message: 'Erro ao aprovar atendimento' });
    }

    console.log('‚úÖ [SESSIONS] Sess√£o aprovada com sucesso');
    res.json({ 
      message: 'Atendimento aprovado com sucesso',
      session: approvedSession
    });

  } catch (error) {
    console.error('‚ùå [SESSIONS] Erro interno na aprova√ß√£o:', error);
    res.status(500).json({ message: 'Erro interno ao aprovar atendimento' });
  }
});

// ‚úÖ LAN√áAR SESS√ÉO (FINANCEIRO) - FUN√á√ÉO CORRIGIDA
router.patch('/:id/launch', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;

    console.log('‚úÖ [SESSIONS] Lan√ßando sess√£o:', id, 'por usu√°rio:', req.user.name, 'tipo:', req.user.type);

    // ‚úÖ CORRE√á√ÉO: Verificar permiss√£o para lan√ßamento
    const canLaunch = req.user.type === 'adm-geral' || 
                     req.user.type.startsWith('financeiro-') ||
                     req.user.type.startsWith('adm-');

    if (!canLaunch) {
      console.log('‚ùå [SESSIONS] Acesso negado para lan√ßamento, tipo:', req.user.type);
      return res.status(403).json({ 
        message: 'Sem permiss√£o para lan√ßar atendimentos',
        userType: req.user.type 
      });
    }

    // Verificar se a sess√£o existe e est√° aprovada
    const { data: session, error: sessionError } = await supabase
      .from('sessions')
      .select('*')
      .eq('id', id)
      .single();

    if (sessionError || !session) {
      return res.status(404).json({ message: 'Atendimento n√£o encontrado' });
    }

    if (!session.is_approved) {
      return res.status(400).json({ 
        message: 'Atendimento deve estar aprovado antes de ser lan√ßado' 
      });
    }

    if (session.is_launched) {
      return res.status(400).json({ message: 'Atendimento j√° foi lan√ßado' });
    }

    const { data: launchedSession, error: launchError } = await supabase
      .from('sessions')
      .update({
        is_launched: true,
        launched_at: new Date().toISOString(),
        launched_by: req.user.id
      })
      .eq('id', id)
      .select()
      .single();

    if (launchError) {
      console.error('‚ùå [SESSIONS] Erro ao lan√ßar sess√£o:', launchError);
      return res.status(500).json({ message: 'Erro ao lan√ßar atendimento' });
    }

    console.log('‚úÖ [SESSIONS] Sess√£o lan√ßada com sucesso');
    res.json({ 
      message: 'Atendimento lan√ßado com sucesso',
      session: launchedSession
    });

  } catch (error) {
    console.error('‚ùå [SESSIONS] Erro interno no lan√ßamento:', error);
    res.status(500).json({ message: 'Erro interno ao lan√ßar atendimento' });
  }
});

// ‚úÖ EXCLUIR SESS√ÉO
router.delete('/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;

    console.log('üóëÔ∏è [SESSIONS] Excluindo sess√£o:', id);

    // ‚úÖ VERIFICAR SE SESS√ÉO EXISTE
    const { data: session, error: sessionError } = await supabase
      .from('sessions')
      .select('*')
      .eq('id', id)
      .single();

    if (sessionError || !session) {
      console.error('‚ùå [SESSIONS] Sess√£o n√£o encontrada:', sessionError);
      return res.status(404).json({ message: 'Atendimento n√£o encontrado' });
    }

    console.log('üîç [SESSIONS] Sess√£o encontrada:', {
      id: session.id,
      date: session.date,
      hours: session.hours,
      at_id: session.at_id
    });

    // ‚úÖ VERIFICAR PERMISS√ÉO
    const canDelete = req.user.type.startsWith('adm-') || 
                     req.user.type.startsWith('financeiro-') ||
                     session.at_id === req.user.id;

    if (!canDelete) {
      return res.status(403).json({ message: 'Voc√™ n√£o tem permiss√£o para excluir este atendimento' });
    }

    // ‚úÖ EXCLUIR SESS√ÉO (HARD DELETE)
    const { error: deleteError } = await supabase
      .from('sessions')
      .delete()
      .eq('id', id);

    if (deleteError) {
      console.error('‚ùå [SESSIONS] Erro ao deletar sess√£o:', deleteError);
      return res.status(500).json({ 
        message: 'Erro ao excluir atendimento', 
        error: deleteError.message 
      });
    }

    console.log('‚úÖ [SESSIONS] Sess√£o exclu√≠da permanentemente');
    res.json({ 
      message: 'Atendimento exclu√≠do com sucesso',
      deletedSession: {
        id: session.id,
        date: session.date,
        hours: session.hours
      }
    });

  } catch (error) {
    console.error('‚ùå [SESSIONS] Erro interno:', error);
    res.status(500).json({ message: 'Erro interno ao excluir atendimento' });
  }
});

export default router;