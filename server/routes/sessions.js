import express from 'express';
import supabase from '../config/supabase.js';
import { authenticateToken } from '../middleware/auth.js';

const router = express.Router();

// ‚úÖ FUN√á√ÉO CORRIGIDA para calcular horas com precis√£o
const calculatePreciseHours = (startTime, endTime) => {
  if (!startTime || !endTime) return 0;
  
  const [startHour, startMin] = startTime.split(':').map(Number);
  const [endHour, endMin] = endTime.split(':').map(Number);
  
  if (isNaN(startHour) || isNaN(startMin) || isNaN(endHour) || isNaN(endMin)) return 0;
  if (startMin >= 60 || endMin >= 60) return 0;
  
  const startMinutes = startHour * 60 + startMin;
  const endMinutes = endHour * 60 + endMin;
  
  let diffMinutes = endMinutes - startMinutes;
  if (diffMinutes < 0) diffMinutes += 24 * 60; // Para hor√°rios overnight
  
  // ‚úÖ RETORNAR VALOR EXATO SEM ARREDONDAMENTO
  return Math.max(0, diffMinutes / 60);
};

// =====================================================
// GET SESSIONS - Listar sess√µes
// =====================================================
router.get('/', authenticateToken, async (req, res) => {
  try {
    const { month, year, patient_id, at_id } = req.query;

    console.log('üîç Buscando sess√µes para:', {
      user_type: req.user.type,
      user_sector: req.user.sector,
      user_id: req.user.id,
      filters: { month, year, patient_id, at_id }
    });

    let query = supabase
      .from('sessions')
      .select(`
        *,
        patient:patients!sessions_patient_id_fkey(id, name, sector, parent_email, parent_email2, at_id),
        at:users!sessions_at_id_fkey(id, name, sector, email)
      `)
      .order('date', { ascending: false })
      .order('start_time', { ascending: false });

    // ‚úÖ FILTROS POR TIPO DE USU√ÅRIO
    if (req.user.type === 'pais') {
      const { data: parentUser, error: parentError } = await supabase
        .from('users')
        .select('email')
        .eq('id', req.user.id)
        .single();

      if (parentError) {
        return res.status(500).json({ message: 'Erro ao buscar dados do respons√°vel' });
      }

      const { data: myChildren, error: patientsError } = await supabase
        .from('patients')
        .select('id')
        .or(`parent_email.eq.${parentUser.email},parent_email2.eq.${parentUser.email}`);

      if (patientsError) {
        return res.status(500).json({ message: 'Erro ao buscar pacientes vinculados' });
      }

      const childrenIds = myChildren.map(child => child.id);
      if (childrenIds.length > 0) {
        query = query.in('patient_id', childrenIds).eq('is_approved', true);
        console.log(`üë™ Pais - Buscando sess√µes de ${childrenIds.length} filhos`);
      } else {
        return res.json([]);
      }
    } else if (req.user.type.startsWith('at-')) {
      // ‚úÖ NOVA L√ìGICA: ATs veem suas pr√≥prias sess√µes (onde eles atenderam)
      query = query.eq('at_id', req.user.id);
      console.log(`üë®‚Äç‚öïÔ∏è AT - Buscando sess√µes onde AT atendeu: ${req.user.id}`);
    } else if (req.user.sector && req.user.type !== 'adm-geral') {
      // Para admins setoriais, coordena√ß√£o, etc.
      const { data: sectorPatients } = await supabase
        .from('patients')
        .select('id')
        .eq('sector', req.user.sector);

      const patientIds = sectorPatients?.map(p => p.id) || [];
      if (patientIds.length > 0) {
        query = query.in('patient_id', patientIds);
        console.log(`üè¢ Setor ${req.user.sector} - ${patientIds.length} pacientes`);
      }
    }

    // ‚úÖ FILTROS ADICIONAIS
    if (patient_id) {
      query = query.eq('patient_id', patient_id);
    }

    if (at_id) {
      query = query.eq('at_id', at_id);
    }

    if (month && year) {
      const startDate = `${year}-${month.padStart(2, '0')}-01`;
      const endDate = `${year}-${month.padStart(2, '0')}-31`;
      query = query.gte('date', startDate).lte('date', endDate);
    }

    const { data: sessions, error } = await query;

    if (error) {
      console.error('‚ùå Erro ao buscar sess√µes:', error);
      return res.status(500).json({ message: 'Erro ao buscar sess√µes' });
    }

    // ‚úÖ LOG para debug das primeiras sess√µes
    if (sessions && sessions.length > 0) {
      console.log(`‚úÖ ${sessions.length} sess√µes encontradas`);
      sessions.slice(0, 2).forEach((session, i) => {
        console.log(`üîç Sess√£o ${i + 1}:`, {
          id: session.id.substring(0, 8),
          paciente: session.patient?.name,
          at: session.at?.name,
          horarios: `${session.start_time} - ${session.end_time}`,
          hours_stored: session.hours,
          is_substitution: session.is_substitution
        });
      });
    }

    res.json(sessions);
  } catch (error) {
    console.error('‚ùå Erro interno ao buscar sess√µes:', error);
    res.status(500).json({ message: 'Erro interno do servidor' });
  }
});

// =====================================================
// POST SESSIONS - Criar sess√£o (L√ìGICA CORRIGIDA)
// =====================================================
router.post('/', authenticateToken, async (req, res) => {
  try {
    const { patient_id, start_time, end_time, date, observations, is_substitution } = req.body;

    console.log('üì§ CRIANDO SESS√ÉO:', {
      patient_id, 
      start_time, 
      end_time, 
      date, 
      is_substitution,
      at_logado: req.user.id,
      at_nome: req.user.name,
      at_setor: req.user.sector
    });

    if (!patient_id || !start_time || !end_time || !date) {
      return res.status(400).json({ message: 'Preencha todos os campos obrigat√≥rios' });
    }

    // ‚úÖ NOVA L√ìGICA CORRIGIDA: AT_ID sempre √© quem est√° logado
    const atId = req.user.id;  // SEMPRE o AT que est√° fazendo o atendimento
    
    let isSubstitutionReal = false;
    let originalATInfo = null;

    if (is_substitution) {
      console.log('üîÑ Verificando se √© substitui√ß√£o real...');
      
      // Buscar o AT original do paciente
      const { data: patient, error: patientError } = await supabase
        .from('patients')
        .select(`
          id, name, sector, at_id,
          original_at:users!patients_at_id_fkey(id, name, email)
        `)
        .eq('id', patient_id)
        .single();

      if (patientError) {
        console.error('‚ùå Erro ao buscar paciente:', patientError);
        return res.status(500).json({ message: 'Erro ao buscar dados do paciente' });
      }

      originalATInfo = patient.original_at;

      console.log('üë§ Dados do paciente:', {
        nome: patient.name,
        setor: patient.sector,
        at_original_id: patient.at_id,
        at_original_nome: originalATInfo?.name
      });

      // ‚úÖ REGRA CORRETA: √â substitui√ß√£o se o AT logado √© diferente do AT do paciente
      if (patient.at_id && patient.at_id !== req.user.id) {
        isSubstitutionReal = true;
        console.log(`‚úÖ SUBSTITUI√á√ÉO CONFIRMADA: ${req.user.name} substituindo ${originalATInfo?.name}`);
      } else if (!patient.at_id) {
        console.log('‚ÑπÔ∏è Paciente sem AT atribu√≠do - atendimento normal');
        isSubstitutionReal = false;
      } else {
        console.log('‚ÑπÔ∏è AT est√° atendendo seu pr√≥prio paciente - atendimento normal');
        isSubstitutionReal = false;
      }
    }

    // ‚úÖ CALCULAR HORAS COM PRECIS√ÉO
    const hours = calculatePreciseHours(start_time, end_time);
    console.log(`‚è∞ Horas calculadas: ${hours} (${typeof hours})`);

    if (hours <= 0) {
      return res.status(400).json({ message: 'Hora final deve ser posterior √† inicial' });
    }

    // ‚úÖ DADOS PARA INSER√á√ÉO - L√ìGICA TOTALMENTE CORRIGIDA
    const sessionData = {
      patient_id,
      at_id: atId,  // ‚úÖ SEMPRE o AT logado (quem realmente atendeu)
      start_time,
      end_time,
      date,
      hours,
      observations: observations || '',
      is_substitution: isSubstitutionReal,  // ‚úÖ true s√≥ se for substitui√ß√£o real
      is_approved: false,
      is_confirmed: false,
      is_launched: false
    };

    console.log('üíæ DADOS FINAIS PARA INSER√á√ÉO:', sessionData);

    const { data: newSession, error } = await supabase
      .from('sessions')
      .insert(sessionData)
      .select(`
        *,
        patient:patients!sessions_patient_id_fkey(id, name, sector, at_id),
        at:users!sessions_at_id_fkey(id, name, email, sector)
      `)
      .single();

    if (error) {
      console.error('‚ùå Erro ao inserir sess√£o:', error);
      return res.status(500).json({ 
        message: 'Erro ao cadastrar sess√£o',
        error: error.message 
      });
    }

    // ‚úÖ LOG DETALHADO DO RESULTADO
    console.log('‚úÖ SESS√ÉO CRIADA COM SUCESSO:');
    console.log(`   ID: ${newSession.id}`);
    console.log(`   Paciente: ${newSession.patient?.name}`);
    console.log(`   AT que atendeu: ${newSession.at?.name} (ID: ${newSession.at_id})`);
    console.log(`   Horas: ${newSession.hours}`);
    console.log(`   √â substitui√ß√£o: ${newSession.is_substitution}`);
    
    if (isSubstitutionReal && originalATInfo) {
      console.log(`   AT original do paciente: ${originalATInfo.name}`);
      console.log(`   üîÑ ${newSession.at?.name} substituiu ${originalATInfo.name}`);
    }

    // ‚úÖ RESPOSTA COMPLETA
    res.status(201).json({
      message: 'Sess√£o cadastrada com sucesso',
      sessionId: newSession.id,
      session: newSession,
      substitutionInfo: isSubstitutionReal ? {
        substituting_at: newSession.at?.name,
        original_at: originalATInfo?.name,
        patient: newSession.patient?.name
      } : null,
      debug: {
        calculated_hours: hours,
        is_substitution: isSubstitutionReal,
        at_who_attended: newSession.at?.name,
        at_id_used: atId
      }
    });

  } catch (error) {
    console.error('‚ùå Erro interno ao criar sess√£o:', error);
    res.status(500).json({ 
      message: 'Erro interno do servidor',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Erro inesperado'
    });
  }
});

// =====================================================
// PUT SESSIONS - Atualizar sess√£o
// =====================================================
router.put('/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    const { start_time, end_time, date, observations } = req.body;

    console.log(`üìù Atualizando sess√£o ${id}:`, { start_time, end_time, date, observations });

    let updateData = {};
    
    // Se hor√°rios foram alterados, recalcular horas com precis√£o
    if (start_time && end_time) {
      const preciseHours = calculatePreciseHours(start_time, end_time);
      
      if (preciseHours <= 0) {
        return res.status(400).json({ 
          message: 'Hor√°rio de fim deve ser posterior ao hor√°rio de in√≠cio' 
        });
      }
      
      updateData = {
        start_time,
        end_time,
        hours: preciseHours // ‚úÖ USAR VALOR PRECISO
      };
      
      console.log(`‚úÖ Horas recalculadas: ${preciseHours}`);
    }
    
    if (date) updateData.date = date;
    if (observations !== undefined) updateData.observations = observations;

    const { data: updatedSession, error } = await supabase
      .from('sessions')
      .update(updateData)
      .eq('id', id)
      .select(`
        *,
        patient:patients!sessions_patient_id_fkey(name),
        at:users!sessions_at_id_fkey(name)
      `)
      .single();

    if (error) {
      console.error('‚ùå Erro ao atualizar sess√£o:', error);
      return res.status(500).json({ message: 'Erro ao atualizar sess√£o' });
    }

    console.log(`‚úÖ Sess√£o atualizada:`, {
      id: updatedSession.id,
      hours: updatedSession.hours,
      patient: updatedSession.patient?.name,
      at: updatedSession.at?.name
    });

    res.json({
      message: 'Sess√£o atualizada com sucesso',
      session: updatedSession
    });

  } catch (error) {
    console.error('‚ùå Erro interno ao atualizar sess√£o:', error);
    res.status(500).json({ message: 'Erro interno do servidor' });
  }
});

// =====================================================
// PATCH SESSIONS - Confirmar sess√£o (pais)
// =====================================================
router.patch('/:id/confirm', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;

    if (req.user.type !== 'pais') {
      return res.status(403).json({ message: 'Apenas respons√°veis podem confirmar sess√µes' });
    }

    console.log(`üë™ Confirmando sess√£o ${id} pelo respons√°vel ${req.user.name}`);

    const { data: updatedSession, error } = await supabase
      .from('sessions')
      .update({ 
        is_confirmed: true,
        confirmed_at: new Date().toISOString(),
        confirmed_by: req.user.id
      })
      .eq('id', id)
      .select(`
        *,
        patient:patients!sessions_patient_id_fkey(name),
        at:users!sessions_at_id_fkey(name)
      `)
      .single();

    if (error) {
      console.error('‚ùå Erro ao confirmar sess√£o:', error);
      return res.status(500).json({ message: 'Erro ao confirmar sess√£o' });
    }

    console.log(`‚úÖ Sess√£o confirmada pelo respons√°vel:`, {
      session_id: updatedSession.id,
      patient: updatedSession.patient?.name,
      at: updatedSession.at?.name
    });

    res.json({ 
      message: 'Sess√£o confirmada com sucesso', 
      session: updatedSession 
    });
  } catch (error) {
    console.error('‚ùå Erro interno:', error);
    res.status(500).json({ message: 'Erro interno do servidor' });
  }
});

// =====================================================
// PATCH SESSIONS - Aprovar sess√£o (admin ou coordena√ß√£o)
// =====================================================
router.patch('/:id/approve', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;

    const allowedTypes = [
      'adm-geral', 'adm-aba', 'adm-denver', 'adm-grupo', 'adm-escolar',
      'coordenacao-aba', 'coordenacao-denver', 'coordenacao-escolar', 'coordenacao-grupo'
    ];

    if (!allowedTypes.includes(req.user.type)) {
      return res.status(403).json({ message: 'Apenas administradores ou coordena√ß√£o podem aprovar sess√µes' });
    }

    console.log(`üë®‚Äçüíº Aprovando sess√£o ${id} por ${req.user.name} (${req.user.type})`);

    const { data: updatedSession, error } = await supabase
      .from('sessions')
      .update({
        is_approved: true,
        approved_at: new Date().toISOString(),
        approved_by: req.user.id
      })
      .eq('id', id)
      .select(`
        *,
        patient:patients!sessions_patient_id_fkey(name),
        at:users!sessions_at_id_fkey(name)
      `)
      .single();

    if (error) {
      console.error('‚ùå Erro ao aprovar sess√£o:', error);
      return res.status(500).json({ message: 'Erro ao aprovar sess√£o' });
    }

    console.log(`‚úÖ Sess√£o aprovada:`, {
      session_id: updatedSession.id,
      patient: updatedSession.patient?.name,
      at: updatedSession.at?.name,
      approved_by: req.user.name
    });

    res.json({ 
      message: 'Sess√£o aprovada com sucesso', 
      session: updatedSession 
    });
  } catch (error) {
    console.error('‚ùå Erro interno:', error);
    res.status(500).json({ message: 'Erro interno do servidor' });
  }
});

// =====================================================
// PATCH SESSIONS - Lan√ßar sess√£o (admin)
// =====================================================
router.patch('/:id/launch', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;

    const allowedTypes = [
      'adm-geral', 'adm-aba', 'adm-denver', 'adm-grupo', 'adm-escolar'
    ];

    if (!allowedTypes.includes(req.user.type)) {
      return res.status(403).json({ message: 'Apenas administradores podem lan√ßar sess√µes' });
    }

    console.log(`üöÄ Lan√ßando sess√£o ${id} por ${req.user.name} (${req.user.type})`);

    const { data: updatedSession, error } = await supabase
      .from('sessions')
      .update({
        is_launched: true,
        launched_at: new Date().toISOString(),
        launched_by: req.user.id
      })
      .eq('id', id)
      .select(`
        *,
        patient:patients!sessions_patient_id_fkey(name),
        at:users!sessions_at_id_fkey(name)
      `)
      .single();

    if (error) {
      console.error('‚ùå Erro ao lan√ßar sess√£o:', error);
      return res.status(500).json({ message: 'Erro ao lan√ßar sess√£o' });
    }

    console.log(`‚úÖ Sess√£o lan√ßada:`, {
      session_id: updatedSession.id,
      patient: updatedSession.patient?.name,
      at: updatedSession.at?.name,
      launched_by: req.user.name
    });

    res.json({ 
      message: 'Sess√£o lan√ßada com sucesso', 
      session: updatedSession 
    });
  } catch (error) {
    console.error('‚ùå Erro interno:', error);
    res.status(500).json({ message: 'Erro interno do servidor' });
  }
});

// =====================================================
// DELETE SESSIONS - Deletar sess√£o
// =====================================================
router.delete('/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;

    console.log(`üóëÔ∏è Deletando sess√£o ${id} por ${req.user.name}`);

    // Buscar dados da sess√£o antes de deletar
    const { data: existingSession, error: checkError } = await supabase
      .from('sessions')
      .select(`
        id, date, hours, is_substitution,
        patient:patients!sessions_patient_id_fkey(name),
        at:users!sessions_at_id_fkey(name)
      `)
      .eq('id', id)
      .single();

    if (checkError || !existingSession) {
      console.log(`‚ùå Sess√£o ${id} n√£o encontrada`);
      return res.status(404).json({ message: 'Sess√£o n√£o encontrada' });
    }

    console.log(`üîç Sess√£o encontrada:`, {
      id: existingSession.id,
      patient: existingSession.patient?.name,
      at: existingSession.at?.name,
      date: existingSession.date,
      hours: existingSession.hours,
      is_substitution: existingSession.is_substitution
    });

    const { error: deleteError } = await supabase
      .from('sessions')
      .delete()
      .eq('id', id);

    if (deleteError) {
      console.error('‚ùå Erro ao deletar sess√£o:', deleteError);
      return res.status(500).json({ 
        message: 'Erro ao deletar sess√£o', 
        error: deleteError.message 
      });
    }

    console.log(`‚úÖ Sess√£o ${id} deletada com sucesso`);

    res.json({
      message: 'Sess√£o deletada com sucesso',
      deletedSession: {
        id: existingSession.id,
        patient: existingSession.patient?.name,
        at: existingSession.at?.name,
        date: existingSession.date,
        hours: existingSession.hours,
        is_substitution: existingSession.is_substitution
      }
    });
  } catch (error) {
    console.error('‚ùå Erro interno ao deletar sess√£o:', error);
    res.status(500).json({ message: 'Erro interno do servidor' });
  }
});

export default router;
